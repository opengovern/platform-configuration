ID: aws_pci_dss_v321_requirement_4_1
Title: "Use strong cryptography and security protocols to safeguard sensitive cardholder
  data during transmission over open, public networks"
Description: "Following should be used to safeguard sensitive cardholder data during
  transmission over open, public networks: only trusted keys and certificates are
  accepted, the protocol in use only supports secure versions or configurations and
  the encryption strength is appropriate for the encryption methodology in use. Examples
  of open, public networks include but are not limited to the Internet, wireless technologies,
  including 802.11 and Bluetooth, cellular technologies, for example, Global System
  for Mobile communications (GSM), Code division multiple access (CDMA), general Packet
  Radio Service (GPRS) and satellite communications. Sensitive information must be
  encrypted during transmission over public networks, because it is easy and common
  for a malicious individual to intercept and/or divert data while in transit. Secure
  transmission of cardholder data requires using trusted keys/certificates, a secure
  protocol for transport, and proper encryption strength to encrypt cardholder data.
  Connection requests from systems that do not support the required encryption strength,
  and that would result in an insecure connection, should not be accepted. Note that
  some protocol implementations (such as SSL, SSH v1.0, and early TLS) have known
  vulnerabilities that an attacker can use to gain control of the affected system.
  Whichever security protocol is used, ensure it is configured to use only secure
  versions and configurations to prevent use of an insecure connection—for example,
  by using only trusted certificates and supporting only strong encryption (not supporting
  weaker, insecure protocols or methods). Verifying that certificates are trusted
  (for example, have not expired and are issued from a trusted source) helps ensure
  the integrity of the secure connection. Generally, the web page URL should begin
  with `HTTPS` and/or the web browser display a padlock icon somewhere in the window
  of the browser. Many TLS certificate vendors also provide a highly visible verification
  seal— sometimes referred to as a “security seal,” `secure site seal,` or “secure
  trust seal”)—which may provide the ability to click on the seal to reveal information
  about the website. Refer to industry standards and best practices for information
  on strong cryptography and secure protocols (e.g., NIST SP 800-52 and SP 800-57,
  OWASP, etc.) Note: SSL/early TLS is not considered strong cryptography and may not
  be used as a security control, except by POS POI terminals that are verified as
  not being susceptible to known exploits and the termination points to which they
  connect as defined in Appendix A2."
SectionCode: "1"
Children:
- aws_pci_dss_v321_requirement_4_1_a
- aws_pci_dss_v321_requirement_4_1_d
- aws_pci_dss_v321_requirement_4_1_e
- aws_pci_dss_v321_requirement_4_1_f
- aws_pci_dss_v321_requirement_4_1_g
Tags: {}
Enabled: false
AutoAssign: false
Controls:
- aws_acm_certificate_expires_30_days
- aws_cloudfront_distribution_encryption_in_transit_enabled
- aws_elb_application_lb_drop_http_headers
- aws_elb_application_lb_redirect_http_request_to_https
- aws_elb_classic_lb_use_ssl_certificate
- aws_elb_classic_lb_use_tls_https_listeners
- aws_es_domain_node_to_node_encryption_enabled
- aws_redshift_cluster_encryption_in_transit_enabled
- aws_s3_bucket_enforces_ssl
TracksDriftEvents: false
