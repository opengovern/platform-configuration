ID: aws_config_enabled_all_regions
Title: "AWS Config should be enabled"
Description: "This control checks whether AWS Config is enabled in the account for the local Region and is recording all resources."
Connector:
- aws
Query:
  Engine: CloudQL-v0.0.1
  QueryToExecute: |
    with global_recorders as (
      select
        count(*) as global_config_recorders
      from
        aws_config_configuration_recorder
      where
        recording_group -> 'IncludeGlobalResourceTypes' = 'true'
        and recording_group -> 'AllSupported' = 'true'
        and status ->> 'Recording' = 'true'
        and status ->> 'LastStatus' = 'SUCCESS'
    ),
    regions as (
      select
        'arn:aws::' || a.region || ':' || a.account_id as resource,
        a.og_account_id as og_account_id,
        a.og_resource_id as og_resource_id,
        case
          when
            g.global_config_recorders >= 1
            and status ->> 'Recording' = 'true'
            and status ->> 'LastStatus' = 'SUCCESS'
          then 0
          when a.opt_in_status = 'not-opted-in' then 1
          else 2
        end as status,
        a.region, a.account_id
      from
        global_recorders as g,
        aws_region as a
        left join aws_config_configuration_recorder as r on r.account_id = a.account_id and r.region = a.name
    ),
    results as (
      SELECT 
        account_id AS resource,
        og_account_id as og_account_id,
        og_account_id as og_resource_id,
        case
          when max(status) = 2 then 'alarm'
          when max(status) = 1 then 'skip'
          when max(status) = 0 then 'ok'
        end as status,
        case
          when max(status) = 2 then 'AWS Config is not enabled for this account on regions: [' || string_agg(region, ',') || ']' 
          when max(status) = 1 then 'Account is not opted in regions: [' || string_agg(region, ',') || ']'
          when max(status) = 0 then 'AWS Config is enabled for this account on regions: [' || string_agg(region, ',') || ']'
          end as reason
      FROM regions
      GROUP BY account_id, og_account_id
    )
    SELECT 
      r.resource AS resource,
      r.og_account_id as og_account_id,
      a.og_resource_id as og_resource_id,
      r.status as status,
      r.reason as reason
    FROM results as r JOIN aws_account as a ON r.og_account_id = a.og_account_id
  PrimaryTable: aws_account
  ListOfTables:
  - aws_account
  - aws_config_configuration_recorder
  - aws_region
  Parameters: []
Severity: high
Tags:
  category:
  - Compliance
  cis:
  - "true"
  cis_item_id:
  - "2.5"
  cis_level:
  - "1"
  cis_section_id:
  - "2"
  cis_type:
  - scored
  cis_version:
  - v1.2.0
  plugin:
  - aws
  service:
  - AWS/Config
