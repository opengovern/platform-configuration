ID: aws_iam_policy_custom_attached_no_star_star
Title: "IAM policies should not allow full '*' administrative privileges"
Description: "This control checks whether the default version of IAM policies (also known as customer managed policies) has administrator access that includes a statement with 'Effect': 'Allow' with 'Action': '*' over 'Resource': '*'. The control only checks the customer managed policies that you create. It does not check inline and AWS managed policies."
Query:
  Engine: CloudQL-v0.0.1
  QueryToExecute: "-- This query checks the customer managed policies having * access and attached to IAM resource(s)\nwith star_access_policies as (\n  select\n    arn,\n    count(*) as num_bad_statements\n  from\n    aws_iam_policy,\n    jsonb_array_elements(policy_std -> 'Statement') as s,\n    jsonb_array_elements_text(s -> 'Resource') as resource,\n    jsonb_array_elements_text(s -> 'Action') as action\n  where\n    not is_aws_managed\n    and s ->> 'Effect' = 'Allow'\n    and resource = '*'\n    and (\n      (action = '*'\n      or action = '*:*'\n      )\n    )\n    and is_attached\n  group by arn\n)\nselect\n  p.arn as resource,\n  p.og_account_id as og_account_id,\n  p.og_resource_id as og_resource_id,\n  case\n    when s.arn is null then 'ok'\n    else 'alarm'\n  end status,\n  p.name || ' contains ' || coalesce(s.num_bad_statements,0)  || ' statements that allow action \"*\" on resource \"*\".' as reason\n  \n  , p.account_id\nfrom\n  aws_iam_policy as p\n  left join star_access_policies as s on p.arn = s.arn\nwhere\n  not p.is_aws_managed;\n"
  PrimaryTable: aws_iam_policy
  ListOfTables:
    - aws_iam_policy
    - aws_managed
  Parameters: []
Severity: high
Tags:
  aws_foundational_security:
    - "true"
  category:
    - Compliance
  foundational_security_category:
    - secure_access_management
  foundational_security_item_id:
    - iam_1
  plugin:
    - aws
  service:
    - AWS/IAM
IntegrationType:
  - aws_cloud_account
