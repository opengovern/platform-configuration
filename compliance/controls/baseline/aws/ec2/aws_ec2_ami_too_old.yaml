ID: aws_ec2_ami_too_old
Title: "EC2 AMI Too Old"
Description: "Ensure EC2 Amazon Machine Images (AMIs) aren't too old"
Connector:
- aws
Query:
  Engine: CloudQL-v0.0.1
  QueryToExecute: |
    SELECT 
      image_id as resource,
      og_resource_id,
      og_account_id,
      CASE
        WHEN is_aws_backup_managed THEN 'skip'
        WHEN root_device_type <> 'ebs' THEN 'skip'
        WHEN now() - (creation_date)::timestamp > '{{.awsEbsAmiAgeMaxDays}} days'::interval THEN 'alarm'
        ELSE 'ok'
      END AS status,
      CASE
        WHEN is_aws_backup_managed THEN name || ' is managed by aws'
        WHEN root_device_type <> 'ebs' THEN name || ' is not stored in ebs'
        WHEN now() - (creation_date)::timestamp > '{{.awsEbsAmiAgeMaxDays}} days'::interval THEN name || ' needs to be restarted' 
        ELSE name || ' launch time was not much time ago'
      END AS reason,
      case
        when is_aws_backup_managed then 0
        when root_device_type <> 'ebs' then 0
        when now() - (creation_date)::timestamp > '{{.awsEbsAmiAgeMaxDays}} days'::interval then (SELECT SUM((select cost from pennywise_cost_estimate AS es WHERE es.resource_type = 'aws::ec2::volumesnapshot' 
             AND es.resource_id = s.arn limit 1))
             FROM jsonb_array_elements(block_device_mappings) AS bdm
             LEFT JOIN aws_ebs_snapshot AS s ON s.snapshot_id = bdm -> 'Ebs' ->> 'SnapshotId')
        else 0
      end as cost_optimization,
      region,
      account_id
    FROM 
      aws_ec2_ami
  PrimaryTable: aws_ec2_ami
  ListOfTables:
  - aws_backup_managed
  - aws_ebs_snapshot
  - aws_ec2_ami
  Parameters:
    - Key: awsEbsAmiAgeMaxDays
      Required: true
Severity: high
Tags:
  platform_score_cloud_service_name:
  - AWS EC2
  platform_score_use_case:
  - Lacking High Availability
  score_service_name:
  - AWS EC2
  score_tags:
  - Lacking High Availability
