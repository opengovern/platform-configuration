ID: aws_cis_v150_4_10
Title: "4.10 Ensure a log metric filter and alarm exist for security group changes"
Description: "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Groups are a stateful packet filter that controls ingress and egress traffic within a VPC. It is recommended that a metric filter and alarm be established for detecting changes to Security Groups."
Query:
  Engine: CloudQL-v0.0.1
  QueryToExecute: |-
    with trails as (
      select
        trail.account_id,
        trail.name as trail_name,
        trail.is_logging,
        split_part(trail.log_group_arn, ':', 7) as log_group_name
      from
        aws_cloudtrail_trail as trail,
        jsonb_array_elements(trail.event_selectors) as se
      where
        trail.is_multi_region_trail is true
        and trail.is_logging
        and se ->> 'ReadWriteType' = 'All'
        and trail.log_group_arn is not null
      order by
        trail_name
    ),
    alarms as (
      select
        metric_name,
        action_arn as topic_arn
      from
        aws_cloudwatch_alarm,
        jsonb_array_elements_text(aws_cloudwatch_alarm.alarm_actions) as action_arn
      order by
        metric_name
    ),
    topic_subscriptions as (
      select
        subscription_arn,
        topic_arn
      from
        aws_sns_topic_subscription
      order by
        subscription_arn
    ),
    metric_filters as (
      select
        filter.name as filter_name,
        filter_pattern,
        log_group_name,
        metric_transformation_name
      from
        aws_cloudwatch_log_metric_filter as filter
      where
        filter.filter_pattern ~ '\s*\$\.eventName\s*=\s*AuthorizeSecurityGroupIngress.+\$\.eventName\s*=\s*AuthorizeSecurityGroupEgress.+\$\.eventName\s*=\s*RevokeSecurityGroupIngress.+\$\.eventName\s*=\s*RevokeSecurityGroupEgress.+\$\.eventName\s*=\s*CreateSecurityGroup.+\$\.eventName\s*=\s*DeleteSecurityGroup'
      order by
        filter_name
    ),
    filter_data as (
      select
        t.account_id,
        t.trail_name,
        f.filter_name
      from
        trails as t
      join
        metric_filters as f on f.log_group_name = t.log_group_name
      join
        alarms as alarm on alarm.metric_name = f.metric_transformation_name
      join
        topic_subscriptions as subscription on subscription.topic_arn = alarm.topic_arn
    )
    select
      distinct 'arn:' || a.partition || ':::' || a.account_id as resource,
    a.og_account_id as og_account_id,
    a.og_resource_id as og_resource_id,
      case
        when f.trail_name is null then 'alarm'
        else 'ok'
      end as status,
      case
        when f.trail_name is null then 'No log metric filter and alarm exist for security group changes.'
        else filter_name || ' forwards events for security group changes.'
      end as reason
    from
      aws_account as a
      left join filter_data as f on a.account_id = f.account_id;
  PrimaryTable: aws_cloudtrail_trail
  ListOfTables:
    - aws_cloudtrail_trail
    - aws_cloudwatch_alarm
    - aws_sns_topic_subscription
    - aws_cloudwatch_log_metric_filter
    - aws_account
  Parameters: []
Severity: low
Tags: {}
IntegrationType:
  - aws_cloud_account
